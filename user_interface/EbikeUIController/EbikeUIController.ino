#include <U8g2lib.h>              // Library for handling OLED display
#include <SPI.h>                  // Include the SPI library for communication with the CAN module
#include <Wire.h>                 // Include the Wire library for I2C communication
#include <Toggle.h>               // Include the Toggle library for handling button states

// Define OLED pin connections
#define OLED_MOSI   11
#define OLED_CLK    13
#define OLED_DC     5
#define OLED_CS     10
#define OLED_RESET  23

// Create an instance for a 128x64 display with software SPI
U8G2_SSD1306_128X64_NONAME_1_4W_SW_SPI u8g2(U8G2_R0, /* clk=*/ OLED_CLK, /* data=*/ OLED_MOSI, /* cs=*/ OLED_CS, /* dc=*/ OLED_DC, /* reset=*/ OLED_RESET);

// 'REBIKE Logo', 128x64px
const unsigned char epd_bitmap_REBIKE_Logo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xbe, 0xf8, 0x87, 0xbc, 0x7b, 0xde, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x80, 0x84, 0xa4, 0x0a, 0x42, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x80, 0xa4, 0xa4, 0x0a, 0x42, 0xa0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x20, 0xf0, 0xf7, 0xbc, 0x7a, 0x5e, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x80, 0x20, 0x84, 0x42, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xbe, 0xf8, 0x27, 0xbc, 0x7b, 0xde, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xf8, 0x07, 0xff, 0x8f, 0xe0, 0x3f, 0x87, 0xff, 0xf8, 
	0x01, 0xff, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xfc, 0x07, 0xff, 0x8f, 0xe0, 0x3f, 0x87, 0xff, 0xf8, 
	0x03, 0xff, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xfe, 0x07, 0xff, 0x8f, 0xe0, 0x7f, 0x87, 0xff, 0xf8, 
	0x07, 0xff, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xff, 0x07, 0xff, 0x8f, 0xe0, 0x7f, 0x07, 0xff, 0xf8, 
	0x0f, 0xff, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xff, 0x87, 0xff, 0x8f, 0xe0, 0x7f, 0x07, 0xff, 0xf8, 
	0x0f, 0xff, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xff, 0x87, 0xff, 0x8f, 0xe0, 0xfe, 0x07, 0xff, 0xf8, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xc0, 0x03, 0xfc, 0x3f, 0x81, 0xfe, 0x0f, 0xe0, 0xfe, 0x07, 0xf8, 0x00, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xc0, 0x03, 0xf8, 0x3f, 0x80, 0xfe, 0x0f, 0xe1, 0xfc, 0x07, 0xf0, 0x00, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xc0, 0x03, 0xf8, 0x3f, 0x80, 0xfe, 0x0f, 0xe1, 0xfc, 0x07, 0xf0, 0x00, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xc0, 0x03, 0xf8, 0x3f, 0x80, 0xfe, 0x0f, 0xe3, 0xfc, 0x07, 0xf0, 0x00, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xc0, 0x03, 0xf8, 0x3f, 0x80, 0xfe, 0x0f, 0xe3, 0xf8, 0x07, 0xf0, 0x00, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xc0, 0x03, 0xf8, 0x3f, 0x80, 0xfe, 0x0f, 0xe3, 0xf8, 0x07, 0xf0, 0x00, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xc0, 0x03, 0xf8, 0x3f, 0x80, 0xfe, 0x0f, 0xe7, 0xf0, 0x07, 0xf0, 0x00, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xff, 0xe3, 0xfc, 0x3f, 0x80, 0xfe, 0x0f, 0xe7, 0xf0, 0x07, 0xff, 0xf8, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xff, 0x80, 0xfe, 0x0f, 0xef, 0xe0, 0x07, 0xff, 0xf8, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xfe, 0x00, 0xfe, 0x0f, 0xff, 0xff, 0xc7, 0xff, 0xf8, 
	0x0f, 0xff, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xfc, 0x00, 0xfe, 0x0f, 0xff, 0xff, 0xc7, 0xff, 0xf8, 
	0x0f, 0xff, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xfe, 0x00, 0xfe, 0x0f, 0xff, 0xff, 0xc7, 0xff, 0xf8, 
	0x0f, 0xff, 0xfe, 0x1f, 0xff, 0xe3, 0xff, 0xff, 0x80, 0xfe, 0x0f, 0xff, 0xff, 0xc7, 0xff, 0xf8, 
	0x0f, 0xff, 0xfe, 0x1f, 0xc0, 0x03, 0xff, 0xff, 0xc0, 0xfe, 0x0f, 0xff, 0xff, 0xc7, 0xf8, 0x00, 
	0x0f, 0xff, 0xfe, 0x1f, 0xc0, 0x03, 0xf8, 0x1f, 0xc0, 0xfe, 0x0f, 0xff, 0xff, 0xc7, 0xf0, 0x00, 
	0x0f, 0xff, 0xfe, 0x1f, 0xc0, 0x03, 0xf8, 0x1f, 0xc0, 0xfe, 0x0f, 0xff, 0xff, 0xc7, 0xf0, 0x00, 
	0x0f, 0xe7, 0xf0, 0x1f, 0xc0, 0x03, 0xf8, 0x1f, 0xc0, 0xfe, 0x0f, 0xe0, 0x1f, 0xc7, 0xf0, 0x00, 
	0x0f, 0xe7, 0xf0, 0x1f, 0xc0, 0x03, 0xf8, 0x1f, 0xc0, 0xfe, 0x0f, 0xe0, 0x1f, 0xc7, 0xf0, 0x00, 
	0x0f, 0xe3, 0xf0, 0x1f, 0xc0, 0x03, 0xf8, 0x1f, 0xc0, 0xfe, 0x0f, 0xe0, 0x1f, 0xc7, 0xf0, 0x00, 
	0x0f, 0xe3, 0xf8, 0x1f, 0xc0, 0x03, 0xf8, 0x1f, 0xc0, 0xfe, 0x0f, 0xe0, 0x1f, 0xc7, 0xf0, 0x00, 
	0x0f, 0xe3, 0xf8, 0x1f, 0xc0, 0x03, 0xf8, 0x1f, 0xc0, 0xfe, 0x0f, 0xe0, 0x1f, 0xc7, 0xf0, 0x00, 
	0x0f, 0xe1, 0xfc, 0x1f, 0xc0, 0x03, 0xfc, 0x1f, 0xc1, 0xfe, 0x0f, 0xe0, 0x1f, 0xc7, 0xf8, 0x00, 
	0x0f, 0xe1, 0xfc, 0x1f, 0xff, 0xe3, 0xff, 0xff, 0xc7, 0xff, 0x8f, 0xe0, 0x1f, 0xc7, 0xff, 0xfc, 
	0x0f, 0xe1, 0xfc, 0x1f, 0xff, 0xe3, 0xff, 0xff, 0xc7, 0xff, 0x8f, 0xe0, 0x1f, 0xc7, 0xff, 0xfc, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xff, 0xe1, 0xff, 0xff, 0xc7, 0xff, 0x8f, 0xe0, 0x1f, 0xc7, 0xff, 0xfc, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xff, 0xe0, 0xff, 0xff, 0xc7, 0xff, 0x8f, 0xe0, 0x1f, 0xc7, 0xff, 0xfc, 
	0x0f, 0xe0, 0xfe, 0x1f, 0xff, 0xe0, 0x7f, 0xff, 0xc7, 0xff, 0x8f, 0xe0, 0x1f, 0xc7, 0xff, 0xfc, 
	0x0f, 0xe0, 0x7f, 0x1f, 0xff, 0xe0, 0x3f, 0xff, 0xc7, 0xff, 0x8f, 0xe0, 0x1f, 0xc7, 0xff, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'BATTERY Label', 48x7px
const unsigned char epd_bitmap_BATTERY_Label [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xef, 0xbe, 0xfb, 0xef, 0xa2, 0x02, 0x28, 0x88, 0x22, 
	0x08, 0xa2, 0x02, 0x28, 0x88, 0x22, 0x08, 0xa2, 0x03, 0xc8, 0x88, 0x23, 0xcf, 0x3e, 0x02, 0x2f, 
	0x88, 0x22, 0x08, 0x88, 0x03, 0xe8, 0x88, 0x23, 0xe8, 0x88
};
// 'ACTIVE REGEN Label', 72x6px
const unsigned char epd_bitmap_ACTIVE_REGEN_Label [] PROGMEM = {
	0x07, 0xdf, 0x7d, 0xf4, 0x5f, 0x1f, 0x7d, 0xf7, 0xdf, 0x04, 0x50, 0x10, 0x44, 0x50, 0x11, 0x41, 
	0x04, 0x11, 0x04, 0x50, 0x10, 0x44, 0x50, 0x11, 0x41, 0x04, 0x11, 0x04, 0x50, 0x10, 0x44, 0x5e, 
	0x1e, 0x79, 0x77, 0x91, 0x07, 0xd0, 0x10, 0x44, 0x50, 0x11, 0x41, 0x14, 0x11, 0x04, 0x5f, 0x11, 
	0xf3, 0x9f, 0x11, 0x7d, 0xf7, 0xd1
};
// 'Battery Level Sym', 32x20px
const unsigned char epd_bitmap_Battery_Level_Sym [] PROGMEM = {
	0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf0, 
	0x00, 0x00, 0x3c, 0xf0, 0x00, 0x00, 0x3c, 0xf0, 0x00, 0x00, 0x3c, 0xf0, 0x00, 0x00, 0x3c, 0xf0, 
	0x00, 0x0f, 0x3c, 0xf0, 0x00, 0x0f, 0x3c, 0xf0, 0x00, 0x0f, 0x3c, 0xf0, 0x00, 0x0f, 0x3c, 0xf0, 
	0x03, 0xcf, 0x3c, 0xf0, 0x03, 0xcf, 0x3c, 0xf0, 0x03, 0xcf, 0x3c, 0xf0, 0x03, 0xcf, 0x3c, 0xf0, 
	0xf3, 0xcf, 0x3c, 0xf0, 0xf3, 0xcf, 0x3c, 0xf0, 0xf3, 0xcf, 0x3c, 0xf0, 0xf3, 0xcf, 0x3c, 0xf0
};
// 'Battery Percentage Sym', 16x6px
const unsigned char epd_bitmap_Battery_Percentage_Sym [] PROGMEM = {
	0xe1, 0x00, 0xa2, 0x00, 0xe4, 0x00, 0x09, 0xc0, 0x11, 0x40, 0x21, 0xc0
};
// 'KM HR Sym', 24x25px
const unsigned char epd_bitmap_KM_HR_Sym [] PROGMEM = {
	0xc3, 0x0f, 0xfc, 0xc3, 0x0f, 0xfc, 0xcc, 0x0c, 0xcc, 0xcc, 0x0c, 0xcc, 0xf0, 0x0c, 0xcc, 0xf0, 
	0x0c, 0xcc, 0xcc, 0x0c, 0xcc, 0xcc, 0x0c, 0xcc, 0xc3, 0x0c, 0xcc, 0xc3, 0x0c, 0xcc, 0xc0, 0xcc, 
	0xcc, 0xc0, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0xc0, 0xcf, 0xfc, 0xc0, 0xcf, 0xfc, 0xc0, 0xcc, 0x0c, 
	0xc0, 0xcc, 0x0c, 0xc0, 0xcc, 0x0c, 0xc0, 0xcc, 0x0c, 0xff, 0xcf, 0xf0, 0xff, 0xcf, 0xf0, 0xc0, 
	0xcc, 0x0c, 0xc0, 0xcc, 0x0c, 0xc0, 0xcc, 0x0c, 0xc0, 0xcc, 0x0c
};
// 'Celsius Sym', 16x6px
const unsigned char epd_bitmap_Celsius_Sym [] PROGMEM = {
	0xef, 0x80, 0xa8, 0x00, 0xe8, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0f, 0x80
};
// 'Lower Horiz Line', 88x1px
const unsigned char epd_bitmap_Lower_Horiz_Line [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8
};
// 'MOTOR Label', 32x8px
const unsigned char epd_bitmap_MOTOR_Label [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0xfb, 0xef, 0xbe, 0xf8, 0xaa, 0x22, 0x22, 0x88, 0xaa, 0x22, 0x22, 0x88, 
	0xaa, 0x22, 0x22, 0xf0, 0xaa, 0x22, 0x22, 0x88, 0xab, 0xe2, 0x3e, 0x88, 0x00, 0x00, 0x00, 0x00
};
// 'THROTTLE Label', 48x6px
const unsigned char epd_bitmap_THROTTLE_Label [] PROGMEM = {
	0x7d, 0x17, 0xdf, 0x7d, 0xf4, 0x1f, 0x11, 0x14, 0x51, 0x10, 0x44, 0x10, 0x11, 0x14, 0x51, 0x10, 
	0x44, 0x10, 0x11, 0xf7, 0x91, 0x10, 0x44, 0x1e, 0x11, 0x14, 0x51, 0x10, 0x44, 0x10, 0x11, 0x14, 
	0x5f, 0x10, 0x47, 0xdf
};
// 'Throttle Percentage Sym', 16x12px
const unsigned char epd_bitmap_Throttle_Percentage_Sym [] PROGMEM = {
	0xf0, 0x30, 0x90, 0x70, 0x90, 0xe0, 0xf1, 0xc0, 0x03, 0x80, 0x07, 0x00, 0x0e, 0x00, 0x1c, 0x00, 
	0x38, 0xf0, 0x70, 0x90, 0xe0, 0x90, 0xc0, 0xf0
};
// 'Upper Horiz Line', 48x1px
const unsigned char epd_bitmap_Upper_Horiz_Line [] PROGMEM = {
	0x0f, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Vert Line', 8x64px
const unsigned char epd_bitmap_Vert_Line [] PROGMEM = {
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
};
// 'Watts Sym', 16x7px
const unsigned char epd_bitmap_Watts_Sym [] PROGMEM = {
	0x00, 0x00, 0x80, 0x80, 0x88, 0x80, 0x88, 0x80, 0x88, 0x80, 0x88, 0x80, 0x7f, 0x00
};
// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 688)
// const unsigned char* epd_bitmap_allArray[13] = {
// 	epd_bitmap_ACTIVE_REGEN_Label,
// 	epd_bitmap_BATTERY_Label,
// 	epd_bitmap_Battery_Level_Sym,
// 	epd_bitmap_Battery_Percentage_Sym,
// 	epd_bitmap_Celsius_Sym,
// 	epd_bitmap_KM_HR_Sym,
// 	epd_bitmap_Lower_Horiz_Line,
// 	epd_bitmap_MOTOR_Label,
// 	epd_bitmap_THROTTLE_Label,
//   epd_bitmap_Throttle_Percentage_Sym,
// 	epd_bitmap_Upper_Horiz_Line,
// 	epd_bitmap_Vert_Line,
// 	epd_bitmap_Watts_Sym
// };

// 'speed digit 0', 24x36px
const unsigned char epd_bitmap_speed_digit_0 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 
	0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 
	0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 
	0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 
	0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'speed digit 1', 24x36px
const unsigned char epd_bitmap_speed_digit_1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x07, 
	0xff, 0xe0, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 
	0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 
	0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 
	0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 
	0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 
	0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0
};
// 'speed digit 2', 24x36px
const unsigned char epd_bitmap_speed_digit_2 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 
	0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 
	0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'speed digit 5', 24x36px
const unsigned char epd_bitmap_speed_digit_5 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 
	0x00, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 
	0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 
	0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'speed digit 4', 24x36px
const unsigned char epd_bitmap_speed_digit_4 [] PROGMEM = {
	0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 
	0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 
	0x00, 0xfc, 0x00, 0x00, 0xfc, 0x0f, 0xc0, 0xfc, 0x0f, 0xc0, 0xfc, 0x0f, 0xc0, 0xfc, 0x0f, 0xc0, 
	0xfc, 0x0f, 0xc0, 0xfc, 0x0f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x0f, 
	0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x0f, 0xc0, 
	0x00, 0x0f, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x0f, 0xc0
};
// 'speed digit 3', 24x36px
const unsigned char epd_bitmap_speed_digit_3 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 
	0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x03, 0xff, 0xff, 0x03, 0xff, 0xff, 0x03, 0xff, 0xff, 0x03, 
	0xff, 0xff, 0x03, 0xff, 0xff, 0x03, 0xff, 0xff, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 
	0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'speed digit 6', 24x36px
const unsigned char epd_bitmap_speed_digit_6 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 
	0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 
	0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 
	0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'speed digit 7', 24x36px
const unsigned char epd_bitmap_speed_digit_7 [] PROGMEM = {
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xf8, 0xff, 
	0xff, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 
	0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 
	0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x1f, 0xff, 0xff, 0x1f, 0xff, 0xff, 0x1f, 0xff, 0xff, 0x1f, 
	0xff, 0xff, 0x1f, 0xff, 0xff, 0x1f, 0xff, 0xff, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 
	0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 
	0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8
};
// 'speed digit 8', 24x36px
const unsigned char epd_bitmap_speed_digit_8 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 
	0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 
	0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 
	0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'speed digit 9', 24x36px
const unsigned char epd_bitmap_speed_digit_9 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 
	0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 
	0xfc, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 
	0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1280)
// const int epd_bitmap_allArray_LEN = 10;
const unsigned char* epd_bitmap_allArray1[10] = {
	epd_bitmap_speed_digit_0,
	epd_bitmap_speed_digit_1,
	epd_bitmap_speed_digit_2,
	epd_bitmap_speed_digit_3,
	epd_bitmap_speed_digit_4,
	epd_bitmap_speed_digit_5,
	epd_bitmap_speed_digit_6,
	epd_bitmap_speed_digit_7,
	epd_bitmap_speed_digit_8,
	epd_bitmap_speed_digit_9
};

// 'throttle digit 0', 8x12px
const unsigned char epd_bitmap_throttle_digit_0 [] PROGMEM = {
	0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff
};
// 'throttle digit 3', 8x12px
const unsigned char epd_bitmap_throttle_digit_3 [] PROGMEM = {
	0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x3f, 0x3f, 0x03, 0x03, 0xff, 0xff
};
// 'throttle digit 1', 8x12px
const unsigned char epd_bitmap_throttle_digit_1 [] PROGMEM = {
	0x1f, 0x1f, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
};
// 'throttle digit 4', 8x12px
const unsigned char epd_bitmap_throttle_digit_4 [] PROGMEM = {
	0xc0, 0xc0, 0xc0, 0xc0, 0xcc, 0xcc, 0xff, 0xff, 0x0c, 0x0c, 0x0c, 0x0c
};
// 'throttle digit 2', 8x12px
const unsigned char epd_bitmap_throttle_digit_2 [] PROGMEM = {
	0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff
};
// 'throttle digit 5', 8x12px
const unsigned char epd_bitmap_throttle_digit_5 [] PROGMEM = {
	0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff
};
// 'throttle digit 6', 8x12px
const unsigned char epd_bitmap_throttle_digit_6 [] PROGMEM = {
	0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0xc3, 0xc3, 0xff, 0xff
};
// 'throttle digit 7', 8x12px
const unsigned char epd_bitmap_throttle_digit_7 [] PROGMEM = {
	0xfe, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x7f, 0x7f, 0x06, 0x06, 0x06, 0x06
};
// 'throttle digit 8', 8x12px
const unsigned char epd_bitmap_throttle_digit_8 [] PROGMEM = {
	0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff, 0xc3, 0xc3, 0xff, 0xff
};
// 'throttle digit 9', 8x12px
const unsigned char epd_bitmap_throttle_digit_9 [] PROGMEM = {
	0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff, 0x03, 0x03, 0xff, 0xff
};
// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 320)
const int epd_bitmap_allArray_LEN = 10;
const unsigned char* epd_bitmap_allArray2[10] = {
	epd_bitmap_throttle_digit_0,
	epd_bitmap_throttle_digit_1,
	epd_bitmap_throttle_digit_2,
	epd_bitmap_throttle_digit_3,
	epd_bitmap_throttle_digit_4,
	epd_bitmap_throttle_digit_5,
	epd_bitmap_throttle_digit_6,
	epd_bitmap_throttle_digit_7,
	epd_bitmap_throttle_digit_8,
	epd_bitmap_throttle_digit_9
};

// 'motor digit 0', 8x6px
const unsigned char epd_bitmap_motor_digit_0 [] PROGMEM = {
	0x3c, 0x24, 0x24, 0x24, 0x24, 0x3c
};
// 'motor digit 1', 8x6px
const unsigned char epd_bitmap_motor_digit_1 [] PROGMEM = {
	0x18, 0x08, 0x08, 0x08, 0x08, 0x08
};
// 'motor digit 2', 8x6px
const unsigned char epd_bitmap_motor_digit_2 [] PROGMEM = {
	0x3c, 0x04, 0x04, 0x3c, 0x20, 0x3c
};
// 'motor digit 3', 8x6px
const unsigned char epd_bitmap_motor_digit_3 [] PROGMEM = {
	0x3c, 0x04, 0x04, 0x1c, 0x04, 0x3c
};
// 'motor digit 4', 8x6px
const unsigned char epd_bitmap_motor_digit_4 [] PROGMEM = {
	0x20, 0x20, 0x28, 0x3c, 0x08, 0x08
};
// 'motor digit 6', 8x6px
const unsigned char epd_bitmap_motor_digit_6 [] PROGMEM = {
	0x3c, 0x20, 0x20, 0x3c, 0x24, 0x3c
};
// 'motor digit 7', 8x6px
const unsigned char epd_bitmap_motor_digit_7 [] PROGMEM = {
	0x3c, 0x04, 0x04, 0x1e, 0x04, 0x04
};
// 'motor digit 5', 8x6px
const unsigned char epd_bitmap_motor_digit_5 [] PROGMEM = {
	0x3c, 0x20, 0x3c, 0x04, 0x04, 0x3c
};
// 'motor digit 8', 8x6px
const unsigned char epd_bitmap_motor_digit_8 [] PROGMEM = {
	0x3c, 0x24, 0x24, 0x3c, 0x24, 0x3c
};
// 'motor digit 9', 8x6px
const unsigned char epd_bitmap_motor_digit_9 [] PROGMEM = {
	0x3c, 0x24, 0x24, 0x3c, 0x04, 0x3c
};
const unsigned char* epd_bitmap_allArray3[10] = {
	epd_bitmap_motor_digit_0,
	epd_bitmap_motor_digit_1,
	epd_bitmap_motor_digit_2,
	epd_bitmap_motor_digit_3,
	epd_bitmap_motor_digit_4,
	epd_bitmap_motor_digit_5,
	epd_bitmap_motor_digit_6,
	epd_bitmap_motor_digit_7,
	epd_bitmap_motor_digit_8,
	epd_bitmap_motor_digit_9
};

// 'Battery Level Sym 0%', 32x20px
const unsigned char epd_bitmap_Battery_Level_Sym_0_ [] PROGMEM = {
	0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 
	0x00, 0x00, 0x3c, 0x90, 0x00, 0x00, 0x24, 0x90, 0x00, 0x00, 0x24, 0x90, 0x00, 0x00, 0x24, 0x90, 
	0x00, 0x0f, 0x24, 0x90, 0x00, 0x09, 0x24, 0x90, 0x00, 0x09, 0x24, 0x90, 0x00, 0x09, 0x24, 0x90, 
	0x03, 0xc9, 0x24, 0x90, 0x02, 0x49, 0x24, 0x90, 0x02, 0x49, 0x24, 0x90, 0x02, 0x49, 0x24, 0x90, 
	0xf2, 0x49, 0x24, 0x90, 0x92, 0x49, 0x24, 0x90, 0x92, 0x49, 0x24, 0x90, 0xf3, 0xcf, 0x3c, 0xf0
};
// 'Battery Level Sym 20%', 32x20px
const unsigned char epd_bitmap_Battery_Level_Sym_20_ [] PROGMEM = {
	0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 
	0x00, 0x00, 0x3c, 0x90, 0x00, 0x00, 0x24, 0x90, 0x00, 0x00, 0x24, 0x90, 0x00, 0x00, 0x24, 0x90, 
	0x00, 0x0f, 0x24, 0x90, 0x00, 0x09, 0x24, 0x90, 0x00, 0x09, 0x24, 0x90, 0x00, 0x09, 0x24, 0x90, 
	0x03, 0xc9, 0x24, 0x90, 0x02, 0x49, 0x24, 0x90, 0x02, 0x49, 0x24, 0x90, 0x02, 0x49, 0x24, 0x90, 
	0xf2, 0x49, 0x24, 0x90, 0xf2, 0x49, 0x24, 0x90, 0xf2, 0x49, 0x24, 0x90, 0xf3, 0xcf, 0x3c, 0xf0
};
// 'Battery Level Sym 40%', 32x20px
const unsigned char epd_bitmap_Battery_Level_Sym_40_ [] PROGMEM = {
	0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 
	0x00, 0x00, 0x3c, 0x90, 0x00, 0x00, 0x24, 0x90, 0x00, 0x00, 0x24, 0x90, 0x00, 0x00, 0x24, 0x90, 
	0x00, 0x0f, 0x24, 0x90, 0x00, 0x09, 0x24, 0x90, 0x00, 0x09, 0x24, 0x90, 0x00, 0x09, 0x24, 0x90, 
	0x03, 0xc9, 0x24, 0x90, 0x03, 0xc9, 0x24, 0x90, 0x03, 0xc9, 0x24, 0x90, 0x03, 0xc9, 0x24, 0x90, 
	0xf3, 0xc9, 0x24, 0x90, 0xf3, 0xc9, 0x24, 0x90, 0xf3, 0xc9, 0x24, 0x90, 0xf3, 0xcf, 0x3c, 0xf0
};
// 'Battery Level Sym 60%', 32x20px
const unsigned char epd_bitmap_Battery_Level_Sym_60_ [] PROGMEM = {
	0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 
	0x00, 0x00, 0x3c, 0x90, 0x00, 0x00, 0x24, 0x90, 0x00, 0x00, 0x24, 0x90, 0x00, 0x00, 0x24, 0x90, 
	0x00, 0x0f, 0x24, 0x90, 0x00, 0x0f, 0x24, 0x90, 0x00, 0x0f, 0x24, 0x90, 0x00, 0x0f, 0x24, 0x90, 
	0x03, 0xcf, 0x24, 0x90, 0x03, 0xcf, 0x24, 0x90, 0x03, 0xcf, 0x24, 0x90, 0x03, 0xcf, 0x24, 0x90, 
	0xf3, 0xcf, 0x24, 0x90, 0xf3, 0xcf, 0x24, 0x90, 0xf3, 0xcf, 0x24, 0x90, 0xf3, 0xcf, 0x3c, 0xf0
};
// 'Battery Level Sym 80%', 32x20px
const unsigned char epd_bitmap_Battery_Level_Sym_80_ [] PROGMEM = {
	0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90, 
	0x00, 0x00, 0x3c, 0x90, 0x00, 0x00, 0x3c, 0x90, 0x00, 0x00, 0x3c, 0x90, 0x00, 0x00, 0x3c, 0x90, 
	0x00, 0x0f, 0x3c, 0x90, 0x00, 0x0f, 0x3c, 0x90, 0x00, 0x0f, 0x3c, 0x90, 0x00, 0x0f, 0x3c, 0x90, 
	0x03, 0xcf, 0x3c, 0x90, 0x03, 0xcf, 0x3c, 0x90, 0x03, 0xcf, 0x3c, 0x90, 0x03, 0xcf, 0x3c, 0x90, 
	0xf3, 0xcf, 0x3c, 0x90, 0xf3, 0xcf, 0x3c, 0x90, 0xf3, 0xcf, 0x3c, 0x90, 0xf3, 0xcf, 0x3c, 0xf0
};
// 'Battery Level Sym 100%', 32x20px
const unsigned char epd_bitmap_Battery_Level_Sym_100_ [] PROGMEM = {
	0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf0, 
	0x00, 0x00, 0x3c, 0xf0, 0x00, 0x00, 0x3c, 0xf0, 0x00, 0x00, 0x3c, 0xf0, 0x00, 0x00, 0x3c, 0xf0, 
	0x00, 0x0f, 0x3c, 0xf0, 0x00, 0x0f, 0x3c, 0xf0, 0x00, 0x0f, 0x3c, 0xf0, 0x00, 0x0f, 0x3c, 0xf0, 
	0x03, 0xcf, 0x3c, 0xf0, 0x03, 0xcf, 0x3c, 0xf0, 0x03, 0xcf, 0x3c, 0xf0, 0x03, 0xcf, 0x3c, 0xf0, 
	0xf3, 0xcf, 0x3c, 0xf0, 0xf3, 0xcf, 0x3c, 0xf0, 0xf3, 0xcf, 0x3c, 0xf0, 0xf3, 0xcf, 0x3c, 0xf0
};
// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 624)
// const int epd_bitmap_allArray_LEN = 6;
// const unsigned char* epd_bitmap_allArray[6] = {
// 	epd_bitmap_Battery_Level_Sym_0_,
// 	epd_bitmap_Battery_Level_Sym_100_,
// 	epd_bitmap_Battery_Level_Sym_20_,
// 	epd_bitmap_Battery_Level_Sym_40_,
// 	epd_bitmap_Battery_Level_Sym_60_,
// 	epd_bitmap_Battery_Level_Sym_80_
// };

// Global variables to store different parameters
int speed = 0;                    // Speed of the e-bike
int throttle = 0;                 // Max throttle percentage
int power = 0;                    // E-bike power output OR regenerative power
int temp = 0;                     // Temperature of the e-bike system
int batteryRange = 0;             // Battery range of the e-bike
int regenMethod = 1;              // Regenerative braking method (1 or 2)

// Variables to convert system parameters from int to display format
char speed_string[10];
int speed_string_length;

char throttle_string[10];
int throttle_string_length;

char power_string[10];
int power_string_length;

char temp_string[10];
int temp_string_length;

char battery_string[10];
int battery_string_length;

int activeRegen = 1;

// Create Toggle instances for buttons to increase throttle, decrease throttle, and toggle regenerative braking
Toggle increaseThrottle(6);       // Button to increase throttle
Toggle decreaseThrottle(7);       // Button to decrease throttle
Toggle toggleRegen(8);            // Button to toggle regenerative braking method

void setup() {

  // Initialize the OLED display
  u8g2.begin();

  // Display the logo during setup
  u8g2.firstPage();
  do {
    // Draw logo during system startup
    u8g2.drawBitmap(0, 0, 128/8, 64, epd_bitmap_REBIKE_Logo);
  } while (u8g2.nextPage());

  // Wait for 4 seconds to show the logo
  delay(4000);

   // Initialize the button toggles
  increaseThrottle.begin(0);
  decreaseThrottle.begin(1);
  toggleRegen.begin(2);

  // This pin is connected to a potentiometer for testing purposes.
  pinMode(14, INPUT);

  }

void loop() {

  // Poll the state of each button
  increaseThrottle.poll();
  decreaseThrottle.poll();
  toggleRegen.poll();

  // Functions to read incoming signals from the motor controller and BMS to update various
  // system parameters for UI display (speed, power, temperature, battery range)
  updateSpeed();
  updatePower();
  updateTemp();
  updateBatteryRange();
  
  // Check if the increase throttle button has been pressed
  if (increaseThrottle.onPress()) {

    // Adjust the current speed by sending an increase speed request to motor controller
    adjustSpeedRequest(+1);
    Serial.println("Request to increase motor speed sent to Motor Controller via CAN");

  }

  // Check if the decrease throttle button has been pressed
  if (decreaseThrottle.onPress()) {

    // Adjust the current speed by sending a decrease speed request to motor controller
    adjustSpeedRequest(-1);
    Serial.println("Request to decrease motor speed sent to Motor Controller via CAN");

  }

  // Check if the toggle regenerative braking button has been pressed
  if (toggleRegen.onPress()) {

    // Change the active regenerative braking method
    changeActiveRegenRequest();
    Serial.println("Request to change the active regenerative braking method has been sent to Motor Controller via CAN");

    // Update the display to show the new regenerative braking method
    updateRegen();

  }

  // Update the display to show the latest values
  updateDisplay();
  
}

// Function to update the current speed
void adjustSpeedRequest(int adjustment) {

  // Code to send request to motor controller FW to adjust the current speed goes here

  if (adjustment == 1) {
    // Send increase speed request to motor controller

    if (throttle == 100) {
      return;
    } else {
      throttle += 5;
    }

  } else if (adjustment == -1) {
    // Send decrease speed request to motor controller
    
    if (throttle == 0) {
      return;
    } else {
      throttle -= 5;
    }
  
  }

}

// Function to update the display variable that shows the current speed
void updateSpeed(void) {

  // Code to read the current speed signal from the motor controller and update the speed variable goes here

  // This is connected to a potentiometer for testing purposes only.
  speed = map(analogRead(14), 0, 1023, 0, 99);
  throttle = map(analogRead(14), 0, 1023, 0, 99);

}

// Function to update the display variable that shows the current power output
void updatePower(void) {  

  // Code to read the current motor power output signal from the motor controller and update the power variable goes here
  
  // This is connected to a potentiometer for testing purposes only.
  power = map(analogRead(14), 0, 1023, 0, 999);

}

// Function to update the display variable that shows the current motor temperature
void updateTemp(void) {

  // Code to read the current motor temperature signal from the motor controller and update the temperature variable goes here
  
  // This is connected to a potentiometer for testing purposes only.
  temp = map(analogRead(14), 0, 1023, 0, 99);

}

// Function to update the display variable that shows the current battery range
void updateBatteryRange(void) {

  // Code to read the current battery range signal from the BMS and update the battery range variable goes here

  // This is connected to a potentiometer for testing purposes only.
  batteryRange = map(analogRead(14), 0, 1023, 0, 99);

}

// Function to update the active regenerative braking method
void changeActiveRegenRequest(void) {

  // Code to send request to motor controller FW to toggle the active regenerative braking method goes here

}

// Function to update the display variable that shows the active regenerative braking method
void updateRegen(void) {

  // Code to update the active regenerative braking method variable goes here
  if (activeRegen == 1) {
    activeRegen = 2;
  } else {
    activeRegen = 1;
  }

}

// Function to update the display with the latest values
void updateDisplay(void) {

  itoa(speed, speed_string, 10);
  itoa(throttle, throttle_string, 10);
  itoa(power, power_string, 10);
  itoa(temp, temp_string, 10);
  itoa(batteryRange, battery_string, 10);

  speed_string_length = strlen(speed_string);
  throttle_string_length = strlen(throttle_string);
  power_string_length = strlen(power_string);
  temp_string_length = strlen(temp_string);
  battery_string_length = strlen(battery_string);

  u8g2.firstPage();
  do {
    
    for (int i = 0; i < speed_string_length; i++) {
      u8g2.drawBitmap( (56 - speed_string_length * 28 ) + 30*i, 2, 24/8, 36, epd_bitmap_allArray1[ speed_string[i] - 48 ]);
    }

    for (int i = 0; i < throttle_string_length; i++) {
      u8g2.drawBitmap( (20 - throttle_string_length * 10) + 10*i , 41, 8/8, 12, epd_bitmap_allArray2[ throttle_string[i] - 48 ]);
    }

    for (int i = 0; i < power_string_length; i++) {
      u8g2.drawBitmap( (102 - power_string_length * 4 ) + 6*i, 9, 8/8, 6, epd_bitmap_allArray3[ power_string[i] - 48 ]);
    }

    for (int i = 0; i < temp_string_length; i++) {
      u8g2.drawBitmap( (102 - temp_string_length * 4 ) + 6*i, 17, 8/8, 6, epd_bitmap_allArray3[ temp_string[i] - 48 ]);
    }

    for (int i = 0; i < battery_string_length; i++) {
      u8g2.drawBitmap( (102 - battery_string_length * 4 ) + 6*i, 58, 8/8, 6, epd_bitmap_allArray3[ battery_string[i] - 48 ]);
    }

    u8g2.drawBitmap(80, 25, 48/8, 7, epd_bitmap_BATTERY_Label);
    u8g2.drawBitmap(78, 0, 8/8, 64, epd_bitmap_Vert_Line);
    u8g2.drawBitmap(0, 55, 88/8, 1, epd_bitmap_Lower_Horiz_Line);
    u8g2.drawBitmap(80, 24, 48/8, 1, epd_bitmap_Upper_Horiz_Line);
    u8g2.drawBitmap(59, 7, 24/8, 25, epd_bitmap_KM_HR_Sym);
    u8g2.drawBitmap(22, 41, 16/8, 12, epd_bitmap_Throttle_Percentage_Sym);
    u8g2.drawBitmap(35, 44, 48/8, 6, epd_bitmap_THROTTLE_Label);
    u8g2.drawBitmap(-2, 58, 72/8, 6, epd_bitmap_ACTIVE_REGEN_Label);
    u8g2.drawBitmap(92, 0, 32/8, 8, epd_bitmap_MOTOR_Label);
    u8g2.drawBitmap(110, 8, 16/8, 7, epd_bitmap_Watts_Sym);
    u8g2.drawBitmap(110, 17, 16/8, 6, epd_bitmap_Celsius_Sym);
    u8g2.drawBitmap(108, 57, 16/8, 6, epd_bitmap_Battery_Percentage_Sym);
    
    if (batteryRange > 80) {
      u8g2.drawBitmap(93, 36, 32/8, 20, epd_bitmap_Battery_Level_Sym_100_);
    } else if (batteryRange > 60 && batteryRange <= 80) {
      u8g2.drawBitmap(93, 36, 32/8, 20, epd_bitmap_Battery_Level_Sym_80_);
    } else if (batteryRange > 40 && batteryRange <= 60) {
      u8g2.drawBitmap(93, 36, 32/8, 20, epd_bitmap_Battery_Level_Sym_60_);
    } else if (batteryRange > 20 && batteryRange <= 40) {
      u8g2.drawBitmap(93, 36, 32/8, 20, epd_bitmap_Battery_Level_Sym_40_);
    } else if (batteryRange > 5 && batteryRange <= 20) {        
      u8g2.drawBitmap(93, 36, 32/8, 20, epd_bitmap_Battery_Level_Sym_20_);
    } else {
      u8g2.drawBitmap(93, 36, 32/8, 20, epd_bitmap_Battery_Level_Sym_0_);
    }

    if (activeRegen == 1) {
      u8g2.drawBitmap(73, 58, 8/8, 6, epd_bitmap_motor_digit_1);
    } else {
      u8g2.drawBitmap(73, 58, 8/8, 6, epd_bitmap_motor_digit_2);
    }

  } while ( u8g2.nextPage() );

}
