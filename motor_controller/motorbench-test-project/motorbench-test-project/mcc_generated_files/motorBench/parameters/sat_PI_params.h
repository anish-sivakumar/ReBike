/* This is an auto-generated file from a template.
 * Do not edit this file as it will be overwritten. */
/**
 * sat_PI_params.h
 * 
 * Module to contain parameters for sat_PI
 *
 * Component: FOC
 */ /*
 *
 * Motor Control Application Framework
 * R7/RC37 (commit 116330, build on 2023 Feb 09)
 *
 * (c) 2017 - 2023 Microchip Technology Inc. and its subsidiaries. You may use
 * this software and any derivatives exclusively with Microchip products.
 *
 * This software and any accompanying information is for suggestion only.
 * It does not modify Microchip's standard warranty for its products.
 * You agree that you are solely responsible for testing the software and
 * determining its suitability.  Microchip has no obligation to modify,
 * test, certify, or support the software.
 *
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".  NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
 * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
 * AND FITNESS FOR A PARTICULAR PURPOSE, OR ITS INTERACTION WITH
 * MICROCHIP PRODUCTS, COMBINATION WITH ANY OTHER PRODUCTS, OR USE IN ANY
 * APPLICATION.
 *
 * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL,
 * PUNITIVE, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF
 * ANY KIND WHATSOEVER RELATED TO THE USE OF THIS SOFTWARE, THE
 * motorBench(R) DEVELOPMENT SUITE TOOL, PARAMETERS AND GENERATED CODE,
 * HOWEVER CAUSED, BY END USERS, WHETHER MICROCHIP'S CUSTOMERS OR
 * CUSTOMER'S CUSTOMERS, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES OR THE DAMAGES ARE FORESEEABLE. TO THE
 * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL
 * CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT
 * OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS
 * SOFTWARE.
 *
 * MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF
 * THESE TERMS.
 *
 *
 ******************************************************************************/

#ifndef __SAT_PI_PARAMS_H
#define __SAT_PI_PARAMS_H

#ifdef __cplusplus
extern "C" {
#endif

/* Current limit is 4.53A, we set the following thresholds as a percentage of this */

/* Threshold limit for current to exit saturation (velocity controller output) */
#define CURRENT_SATURATION_THRESHOLD_DOWN       3301      // Q15(  0.10074) =   +4.39824 A           =   +4.39806 A           + 0.0042%
/* Threshold limit for current to enter saturation (velocity controller output) */
#define CURRENT_SATURATION_THRESHOLD_UP       3507      // Q15(  0.10703) =   +4.67272 A           =   +4.67294 A           - 0.0047%

/* Threshold limits for voltage to enter and exit saturation,
 * normalized to fullscale voltage.
 * NOTE: since we compare Vd^2 + Vq^2 <=> Vthresh^2, the following two
 * constants need to be squared, at the point of use.
 */
/* Threshold limit for voltage to exit saturation (current controller output) */
#define VOLTAGE_SATURATION_THRESHOLD_DOWN_CONSTANT      16081      // Q15(  0.49075) = +850.00943 mline-to-line = +850.00000 mline-to-line + 0.0011%
/* Threshold limit for voltage to enter saturation (current controller output) */
#define VOLTAGE_SATURATION_THRESHOLD_UP_CONSTANT      17027      // Q15(  0.51962) = +900.01310 mline-to-line = +900.00000 mline-to-line + 0.0015%

/* Maximum current command to current controller */
#define CURRENT_MAXIMUM_COMMAND              3400      // Q15(  0.10376) =   +4.53015 A           =   +4.53000 A           + 0.0033%

    
#ifdef __cplusplus
}
#endif

#endif /* __SAT_PI_PARAMS_H */
