/* This is an autogenerated file from a template. Do not edit this file as it will be overwritten.*/
/**
 *
 * timing_params.h
 *
 * Parameters for timing and scheduling
 *
 * Component: miscellaneous
 */ /*
 *
 * Motor Control Application Framework
 * R7/RC37 (commit 116330, build on 2023 Feb 09)
 *
 * (c) 2017 - 2023 Microchip Technology Inc. and its subsidiaries. You may use
 * this software and any derivatives exclusively with Microchip products.
 *
 * This software and any accompanying information is for suggestion only.
 * It does not modify Microchip's standard warranty for its products.
 * You agree that you are solely responsible for testing the software and
 * determining its suitability.  Microchip has no obligation to modify,
 * test, certify, or support the software.
 *
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".  NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
 * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
 * AND FITNESS FOR A PARTICULAR PURPOSE, OR ITS INTERACTION WITH
 * MICROCHIP PRODUCTS, COMBINATION WITH ANY OTHER PRODUCTS, OR USE IN ANY
 * APPLICATION.
 *
 * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL,
 * PUNITIVE, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF
 * ANY KIND WHATSOEVER RELATED TO THE USE OF THIS SOFTWARE, THE
 * motorBench(R) DEVELOPMENT SUITE TOOL, PARAMETERS AND GENERATED CODE,
 * HOWEVER CAUSED, BY END USERS, WHETHER MICROCHIP'S CUSTOMERS OR
 * CUSTOMER'S CUSTOMERS, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES OR THE DAMAGES ARE FORESEEABLE. TO THE
 * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL
 * CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT
 * OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS
 * SOFTWARE.
 *
 * MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF
 * THESE TERMS.
 *
 *
 ******************************************************************************/
#ifndef __TIMING_PARAMS_H
#define __TIMING_PARAMS_H

#ifdef  __cplusplus
extern "C" {
#endif

/* 
 * PWM and control timing parameters:
 *
 * t_PWM:               50.000 us           PWM period
 * f_PWM:               20.000 kHz          PWM frequency
 * t_samp:              50.000 us           sampling period
 * f_samp:              20.000 kHz          sampling frequency
 * t_velloop:            1.000 ms           velocity loop period
 * f_velloop:            1.000 kHz          velocity loop frequency
 * t_UI:               100.000 ms           UI update period
 * f_UI:                10.000  Hz          UI update frequency
 * t_deadtime:           1.000 us           PWM deadtime
 * t_cy:                10.000 ns           instruction cycle period
 * f_cy:               100.000 MHz          instruction cycle frequency
 *
 */

#define DTCY                                     1e-08 // (s)        instruction cycle period
#define LOOPTIMEINSEC                            5e-05 // (s)        sampling period
#define VELOCITY_LOOP_TIME                       0.001 // (s)        velocity loop period
#define VELOCITY_LOOP_FREQ                        1000 // (Hz)       velocity loop frequency
/* integer version of velocityLoopFreq */
#define VELOCITY_LOOP_FREQ_INTEGER           1000

/* Timestep for velocity loop timing, converted to a divider (one velocity control cycle executes every N ISRs) */
#define MCAF_ISR_SUBSAMPLE_DIVIDER             20      // Q0( 20.00000)  =   +1.00000 ms          =   +1.00000 ms          + 0.0000%
#define IRP_PERCALC MCAF_ISR_SUBSAMPLE_DIVIDER 
/* UI update time in ISRs: */
/* UI update period */
#define MCAF_UI_LOOP_TIME_IN_ISRS            2000      // Q0(2000.00000) = +100.00000 ms          = +100.00000 ms          + 0.0000%

// PWM loops necessary for transitioning from open loop to closed loop
#define TRANSITION_STEPS   IRP_PERCALC/4

/* Instruction clock frequency (converted to cycles per nanosecond Q16 for use in time delays) */
#define MCAF_CYCLES_PER_NANOSECOND_Q16       6554      // Q16(  0.10001) = +100.00610 MHz         = +100.00000 MHz         + 0.0061%

/* UI button debounce time in ISRs */
#define MCAF_BUTTON_DEBOUNCE_TIME               7      // Q0(  7.00000)  =   +7.00000 ms          =   +7.00000 ms          + 0.0000%
/* UI button long press time in ISRs */
#define MCAF_BUTTON_LONG_PRESS_TIME          2500      // Q0(2500.00000) =   +2.50000 s           =   +2.50000 s           + 0.0000%

/* ---- system initialization parameters ---- */
#define MCAF_POWERUP_FAULT_LATCH_DELAY 20
/* Number of ISR cycles we allow the gate drive capacitors to charge up,
 * before we enable the fault-latch circuitry to automatically disable PWM circuits.
 * This is only applied on first power-up.
 */
                            
#ifdef  __cplusplus
}
#endif

#endif // __TIMING_PARAMS_H
